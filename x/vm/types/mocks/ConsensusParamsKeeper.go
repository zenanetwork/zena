// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	context "context"

	consensustypes "github.com/cosmos/cosmos-sdk/x/consensus/types"
	mock "github.com/stretchr/testify/mock"
)

// ConsensusParamsKeeper is an autogenerated mock type for the ConsensusParamsKeeper type
type ConsensusParamsKeeper struct {
	mock.Mock
}

// Params provides a mock function with given fields: ctx, request
func (_m *ConsensusParamsKeeper) Params(ctx context.Context, request *consensustypes.QueryParamsRequest) (*consensustypes.QueryParamsResponse, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for Params")
	}

	var r0 *consensustypes.QueryParamsResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *consensustypes.QueryParamsRequest) (*consensustypes.QueryParamsResponse, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *consensustypes.QueryParamsRequest) *consensustypes.QueryParamsResponse); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*consensustypes.QueryParamsResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *consensustypes.QueryParamsRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewConsensusParamsKeeper creates a new instance of ConsensusParamsKeeper. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewConsensusParamsKeeper(t interface {
	mock.TestingT
	Cleanup(func())
},
) *ConsensusParamsKeeper {
	mock := &ConsensusParamsKeeper{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
