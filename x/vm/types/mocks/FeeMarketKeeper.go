// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	math "cosmossdk.io/math"
	feemarkettypes "github.com/zenanetwork/zena/x/feemarket/types"

	mock "github.com/stretchr/testify/mock"

	types "github.com/cosmos/cosmos-sdk/types"
)

// FeeMarketKeeper is an autogenerated mock type for the FeeMarketKeeper type
type FeeMarketKeeper struct {
	mock.Mock
}

// CalculateBaseFee provides a mock function with given fields: ctx
func (_m *FeeMarketKeeper) CalculateBaseFee(ctx types.Context) math.LegacyDec {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for CalculateBaseFee")
	}

	var r0 math.LegacyDec
	if rf, ok := ret.Get(0).(func(types.Context) math.LegacyDec); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(math.LegacyDec)
	}

	return r0
}

// GetBaseFee provides a mock function with given fields: ctx
func (_m *FeeMarketKeeper) GetBaseFee(ctx types.Context) math.LegacyDec {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetBaseFee")
	}

	var r0 math.LegacyDec
	if rf, ok := ret.Get(0).(func(types.Context) math.LegacyDec); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(math.LegacyDec)
	}

	return r0
}

// GetParams provides a mock function with given fields: ctx
func (_m *FeeMarketKeeper) GetParams(ctx types.Context) feemarkettypes.Params {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetParams")
	}

	var r0 feemarkettypes.Params
	if rf, ok := ret.Get(0).(func(types.Context) feemarkettypes.Params); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(feemarkettypes.Params)
	}

	return r0
}

// NewFeeMarketKeeper creates a new instance of FeeMarketKeeper. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewFeeMarketKeeper(t interface {
	mock.TestingT
	Cleanup(func())
},
) *FeeMarketKeeper {
	mock := &FeeMarketKeeper{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
